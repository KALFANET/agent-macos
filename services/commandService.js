const { exec } = require('child_process');
const Logger = require('../common/logger');

/**
 * ◊©◊ô◊®◊ï◊™ ◊ú◊†◊ô◊î◊ï◊ú ◊ë◊ô◊¶◊ï◊¢ ◊§◊ß◊ï◊ì◊ï◊™
 */
class CommandService {
  constructor() {
    // ◊®◊©◊ô◊û◊™ ◊§◊ß◊ï◊ì◊ï◊™ ◊ê◊°◊ï◊®◊ï◊™/◊û◊°◊ï◊õ◊†◊ï◊™
    this.blacklistedCommands = [
      'rm -rf', 
      'sudo rm', 
      'dd if=',
      'mkfs',
      ':(){:|:&};:'  // Fork bomb
    ];
  }
  
  /**
   * ◊ë◊ì◊ô◊ß◊î ◊î◊ê◊ù ◊§◊ß◊ï◊ì◊î ◊û◊ï◊™◊®◊™
   */
  isCommandAllowed(command) {
    return !this.blacklistedCommands.some(blacklisted => 
      command.toLowerCase().includes(blacklisted.toLowerCase())
    );
  }
  
  /**
   * ◊ë◊ô◊¶◊ï◊¢ ◊§◊ß◊ï◊ì◊î
   */
  executeCommand(command) {
    return new Promise((resolve, reject) => {
      // ◊ë◊ì◊ô◊ß◊î ◊©◊î◊§◊ß◊ï◊ì◊î ◊û◊ï◊™◊®◊™
      if (!this.isCommandAllowed(command)) {
        Logger.error(`üõë Blocked potentially dangerous command: ${command}`);
        return reject(new Error('This command is not allowed for security reasons'));
      }
      
      Logger.info(`‚öôÔ∏è Executing command: ${command}`);
      
      exec(command, { timeout: 30000 }, (error, stdout, stderr) => {
        if (error) {
          Logger.error(`‚ùå Command execution error: ${error.message}`);
          return reject(error);
        }
        
        Logger.info(`‚úÖ Command executed successfully`);
        resolve({ stdout, stderr });
      });
    });
  }
}

module.exports = CommandService;